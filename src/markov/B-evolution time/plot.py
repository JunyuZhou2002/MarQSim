import matplotlib.pyplot as plt

# using this function to process the row data of CNOT_numses and acc_reses
def data_process(CNOT_numses, acc_reses, step, alpha):
    num = len(CNOT_numses)
    group_CNOT_numses = []
    group_acc_reses = []

    for i in range(num):
        CNOT = CNOT_numses[i]
        acc = acc_reses[i]

        maximum = max(CNOT)
        minimum = min(CNOT)
        k_max = int((maximum + step - 0.00001) // step)
        k_min = int(minimum // step)
        rounded_max = k_max * step
        rounded_min = k_min * step

        group_CNOT = [k*step+step/2 for k in range(k_min, k_max)]
        group_acc_0 = [[] for k in range(k_min, k_max)]

        num_ = len(CNOT)
        for j in range(num_):
            k = CNOT[j]
            k = int(k // step -k_min)
            group_acc_0[k].append(acc[j])


        group_acc = [sum(group_acc_0[k-k_min])/len(group_acc_0[k-k_min]) if len(group_acc_0[k-k_min]) != 0 else 0 for k in range(k_min, k_max)]
 
        count = 0
        for j in range(len(group_acc)):
            if group_acc[j-count] == 0:
                group_acc.pop(j-count)
                group_CNOT.pop(j-count)
                count = count+1

        num_remove = int(len(group_acc) * alpha)
        if num_remove > 0:
            group_acc = group_acc[num_remove:-num_remove]
            group_CNOT = group_CNOT[num_remove:-num_remove]


        group_CNOT_numses.append(group_CNOT)
        group_acc_reses.append(group_acc)

    return group_CNOT_numses, group_acc_reses

CNOT_numses = [
[242, 298, 418, 546, 648, 216, 312, 422, 542, 714, 226, 282, 460, 502, 670, 220, 306, 402, 542, 620, 232, 314, 462, 516, 632, 168, 294, 394, 542, 622, 216, 320, 446, 508, 648, 214, 318, 482, 518, 634],
[180, 252, 312, 432, 474, 146, 224, 318, 414, 466, 158, 258, 328, 418, 474, 170, 230, 346, 434, 496, 178, 238, 338, 388, 484, 172, 246, 360, 402, 542, 160, 222, 328, 438, 492, 152, 248, 328, 434, 476],
[142, 238, 376, 396, 476, 152, 230, 378, 390, 496, 176, 238, 408, 392, 540, 158, 220, 338, 378, 464, 192, 264, 314, 428, 538, 198, 272, 316, 428, 520, 152, 268, 302, 414, 482, 170, 242, 350, 422, 456]
]

acc_reses = [
[0.9869595774071238, 0.9864447985686223, 0.9880194664197655, 0.9907838714691141, 0.993361651902328, 0.9853122418250534, 0.9883971386578764, 0.9814868780267546, 0.9909531477807841, 0.9947032344871256, 0.978233772536079, 0.9803629663156349, 0.9903775453700667, 0.9941294228839456, 0.9883560654924014, 0.9809510570737932, 0.9751701412740011, 0.9864147522800801, 0.995979488599965, 0.9910541786850743, 0.980503984855273, 0.9874716629508881, 0.9905428297934754, 0.9922507422576037, 0.9913914206745098, 0.9761712704158356, 0.9742775178740116, 0.9872384083409426, 0.9919124862590392, 0.992194355357917, 0.9746164104561202, 0.9887580118667095, 0.9887431264259716, 0.9888146040832719, 0.9901967049008952, 0.9791957238311434, 0.9829905319396702, 0.990760513129496, 0.991229894124912, 0.9955056905765846],
[0.9717762490234043, 0.9832375858165419, 0.9839692128521953, 0.9818288088319772, 0.9926450853891933, 0.9816378422230279, 0.9807232723235567, 0.9890980226136051, 0.988788068302317, 0.9923148171581518, 0.9768792615757278, 0.9918350587073208, 0.9900541306151921, 0.989757789904251, 0.9900239809164744, 0.9460512761711741, 0.972933452157647, 0.9898561246265676, 0.9898991637089442, 0.9943228379846646, 0.9701116711286286, 0.9867020846523445, 0.969745002365612, 0.9887653049125846, 0.9939287976315941, 0.9794223356498434, 0.9819848529152743, 0.9875538978840236, 0.9915223720597269, 0.9944657684338146, 0.9731405413317832, 0.976164963927772, 0.98848307157173, 0.991623461603317, 0.9895849824049465, 0.9851067149383788, 0.9757457279134104, 0.9912990984965325, 0.983641451221674, 0.9883867084422616],
[0.9738221176296373, 0.9857441892381242, 0.9896402434846308, 0.994274021460007, 0.994193315945217, 0.9807796542273274, 0.9877076148995929, 0.9859494059621038, 0.9916148187818342, 0.9885416057167692, 0.9739180180294952, 0.9848365436460388, 0.9849630667434743, 0.9823560910185449, 0.9929886461275385, 0.9854968792619158, 0.9778896835476075, 0.9866245403188854, 0.9966464638765162, 0.9883118278486595, 0.9672446300990483, 0.9909330636862537, 0.9929624200512532, 0.9919738778067024, 0.9908757918972927, 0.9796122954299085, 0.9909879577556524, 0.9851764456041608, 0.9924739082521844, 0.9947589050059831, 0.9776027460691816, 0.9825791863994102, 0.9890473325407799, 0.9891582137925553, 0.9851658456345087, 0.9779125758754125, 0.9798394951128817, 0.9877567295389482, 0.9892618060162539, 0.983518861812006]
]


if len(CNOT_numses) == 3:
    plt.scatter(acc_reses[0], CNOT_numses[0], color='b', label='1.0, 0.0, 0.0', marker='x')
    plt.scatter(acc_reses[1], CNOT_numses[1], color='g', label='0.4, 0.6, 0.0', marker='^')
    plt.scatter(acc_reses[2], CNOT_numses[2], color='y', label='0.4, 0.3, 0.3', marker='o')
    plt.legend(loc='upper left', fontsize=16)

plt.show()
# plt.savefig('Pauli_HF_f' + '\\photo' + '1s+' + '.png')