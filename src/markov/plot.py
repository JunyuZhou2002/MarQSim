import matplotlib.pyplot as plt

# using this function to process the row data of CNOT_numses and acc_reses
def data_process(CNOT_numses, acc_reses, step, alpha):
    num = len(CNOT_numses)
    group_CNOT_numses = []
    group_acc_reses = []

    for i in range(num):
        CNOT = CNOT_numses[i]
        acc = acc_reses[i]

        maximum = max(CNOT)
        minimum = min(CNOT)
        k_max = int((maximum + step - 0.00001) // step)
        k_min = int(minimum // step)
        rounded_max = k_max * step
        rounded_min = k_min * step

        group_CNOT = [k*step+step/2 for k in range(k_min, k_max)]
        group_acc_0 = [[] for k in range(k_min, k_max)]

        num_ = len(CNOT)
        for j in range(num_):
            k = CNOT[j]
            k = int(k // step -k_min)
            group_acc_0[k].append(acc[j])


        group_acc = [sum(group_acc_0[k-k_min])/len(group_acc_0[k-k_min]) if len(group_acc_0[k-k_min]) != 0 else 0 for k in range(k_min, k_max)]
 
        count = 0
        for j in range(len(group_acc)):
            if group_acc[j-count] == 0:
                group_acc.pop(j-count)
                group_CNOT.pop(j-count)
                count = count+1

        num_remove = int(len(group_acc) * alpha)
        if num_remove > 0:
            group_acc = group_acc[num_remove:-num_remove]
            group_CNOT = group_CNOT[num_remove:-num_remove]


        group_CNOT_numses.append(group_CNOT)
        group_acc_reses.append(group_acc)

    return group_CNOT_numses, group_acc_reses

CNOT_numses = [
[43866, 65032, 87604, 109300, 133502, 152496, 176308, 44172, 65674, 87942, 110002, 131484, 153518, 175106, 43886, 65682, 88300, 108876, 133114, 153356, 175926, 43564, 65144, 87476, 109250, 133524, 153054, 175444, 43792, 65486, 88216, 110240, 133454, 153566, 175082, 44292, 65064, 87570, 109778, 132884, 153688, 175388, 44208, 65534, 88630, 110024, 132316, 153554, 174950, 44266, 65900, 86704, 108858, 132920, 152904, 175496, 43682, 64992, 87678, 110404, 132502, 153028, 173422, 43992, 65142, 88136, 108392, 132988, 153688, 174730, 44060, 65364, 87944, 109814, 132870, 153352, 176272, 43584, 65768, 86968, 109130, 133496, 152696, 175120, 43438, 65730, 86942, 109562, 132388, 154352, 174840, 43634, 65648, 87460, 109618, 132036, 152936, 174648, 43536, 64818, 87362, 109858, 132118, 153860, 174570, 43488, 65736, 88098, 108828, 132456, 152964, 175904, 43884, 65316, 87292, 110008, 132806, 152752, 175962, 43780, 65996, 88392, 110442, 133164, 153380, 175902, 43544, 65184, 87034, 109524, 133568, 154498, 176776, 43658, 66596, 87452, 109952, 132642, 152116, 175198],
[24908, 37596, 50844, 61950, 76234, 87770, 101386, 24478, 37128, 50890, 63004, 76462, 87566, 100786, 25258, 37510, 50554, 62638, 76574, 86832, 101808, 25936, 36900, 50512, 62430, 76364, 88290, 102212, 25396, 37368, 49694, 63644, 76572, 88652, 101192, 24850, 37364, 49980, 63682, 76222, 89156, 100088, 25264, 37350, 51336, 63156, 76486, 86962, 100848, 25268, 37436, 50296, 62764, 76824, 88000, 101026, 25670, 37856, 50878, 62740, 76410, 88086, 100804, 25182, 37654, 50610, 62598, 75682, 88064, 101096, 25220, 37826, 50776, 63950, 77450, 87904, 100742, 25462, 37290, 50786, 62946, 75206, 87510, 100002, 24872, 37052, 50970, 62902, 76706, 87818, 100532, 25550, 37816, 50492, 62840, 75990, 88022, 100648, 25688, 37750, 50804, 62942, 76740, 87830, 99502, 25592, 37846, 50378, 62638, 75972, 88378, 100298, 25236, 37194, 50616, 62378, 75546, 87864, 101220, 25176, 37484, 50954, 62786, 76056, 88202, 101394, 25486, 37242, 50318, 63466, 76346, 89646, 102226, 25084, 37804, 50470, 62804, 75622, 87074, 100834],
[25818, 38160, 50036, 63416, 75778, 89354, 101038, 25252, 37454, 50488, 63540, 77776, 88124, 103220, 25446, 38314, 50898, 63276, 76662, 88276, 102134, 25118, 37714, 51544, 63188, 77722, 89690, 101174, 25324, 37596, 51326, 62880, 75800, 87804, 102160, 25454, 37694, 50546, 64606, 76648, 89148, 102800, 25150, 38230, 50546, 63576, 77298, 89344, 101272, 25438, 38418, 50398, 63258, 76808, 88786, 101446, 25110, 37800, 50824, 63042, 77016, 88912, 101980, 25892, 37674, 50604, 63040, 77318, 87998, 101332, 24984, 37454, 51422, 63838, 77148, 88874, 101788, 25652, 37064, 50960, 64196, 77242, 88544, 101776, 24680, 38048, 50088, 63866, 76168, 89446, 100830, 26008, 37818, 50534, 64146, 76488, 88710, 102456, 25238, 37316, 50830, 62442, 75926, 88436, 100576, 25310, 37774, 50672, 62802, 77630, 89208, 101532, 25436, 38096, 50856, 63570, 76800, 88782, 101292, 25474, 37812, 50810, 64246, 76790, 87668, 101618, 25148, 38342, 51188, 63260, 76938, 89162, 100308, 25664, 37428, 50316, 62920, 76458, 88214, 101884]
]

acc_reses = [
[0.977823496319805, 0.9843863276303255, 0.9868959231068721, 0.991578102221725, 0.9916967759297769, 0.9934016466711098, 0.9925471546501186, 0.9806373120428521, 0.9801643498053192, 0.9884905222549946, 0.9908093810134347, 0.9887965322615287, 0.9923233395958545, 0.994727551954455, 0.9738968131510526, 0.9829315120901686, 0.9865212442190372, 0.9897282124081787, 0.9903429762014602, 0.9927675128493598, 0.9931269885538825, 0.9808200237670074, 0.9846346446083928, 0.988194587506898, 0.9905103445611623, 0.992374301403982, 0.9923080206298783, 0.9947076446691158, 0.9779576740768957, 0.9841607836914285, 0.9860879195866848, 0.9912507534589675, 0.9922845363701236, 0.9912655950136585, 0.9958773256003224, 0.972566425955803, 0.9847455621054431, 0.9833127907891511, 0.9879796513463184, 0.9907444715652582, 0.9929825067520378, 0.9934033157138054, 0.9788854721454098, 0.9824517397374208, 0.9871705174447456, 0.9884389043800296, 0.9899184704276093, 0.9943146109653053, 0.9938179850607661, 0.9743185201253766, 0.9845417143581003, 0.9855045082952149, 0.9927855732320683, 0.991613388584064, 0.9928210974119709, 0.9916760926972396, 0.9780485049884168, 0.9845817796769195, 0.9858488501869593, 0.9885327851237299, 0.9915371545837981, 0.9923747188634066, 0.993035614670704, 0.9704242945978776, 0.9823488063816262, 0.9882281426007228, 0.9907941822860709, 0.9898012281832237, 0.9923642876169422, 0.994227409464386, 0.9698058637870348, 0.9838882755270655, 0.9881875533442831, 0.9891161969201097, 0.993726253539633, 0.9933997993129772, 0.9936190844236449, 0.9758449810406256, 0.9848019489042719, 0.9903626442993201, 0.9921060800901943, 0.9912019372117684, 0.9926359658480434, 0.9928307543527212, 0.9782748838844766, 0.9782876373010694, 0.9871879240149202, 0.9924694896991211, 0.9927294260422004, 0.9930228591287116, 0.9940436483013974, 0.9760122903296452, 0.9851038004168532, 0.9874703891155827, 0.9904347658872661, 0.9928782584141462, 0.9918326139745908, 0.9937993288265765, 0.973943142646898, 0.9852834355518688, 0.9891633392037439, 0.9895862340928141, 0.992616177245893, 0.9933287516553208, 0.993764162117187, 0.9758609946747758, 0.9810833339931206, 0.9861293435610103, 0.9886565817096716, 0.9921414257965627, 0.9929859042690526, 0.994752466723286, 0.9717804961064398, 0.9841777683564349, 0.985540749721634, 0.9906789675934974, 0.9924565553737181, 0.9944981932715875, 0.9915977764033669, 0.9752356452825498, 0.9798264504187584, 0.9889518023773871, 0.9896858936711298, 0.9926022892714879, 0.9918187287058939, 0.9932046548159125, 0.9785751258495918, 0.9846234354598417, 0.989872516922919, 0.9920076131932615, 0.9932675958697381, 0.9926862121251396, 0.9938246011814581, 0.9765903958294266, 0.984215557987831, 0.987239122396384, 0.9903103125554635, 0.9918199183384453, 0.9939168692658022, 0.9946706295377825],
[0.9735207615318572, 0.9728391443973224, 0.985131324532469, 0.9861950333010026, 0.9867571184383698, 0.992814838905131, 0.9933370960779031, 0.973834938375357, 0.9720782667011323, 0.9822461132404221, 0.9898431913197501, 0.9862814554959407, 0.9898869399594291, 0.9914407134091873, 0.9672027373717134, 0.9761142134789649, 0.9868797092406948, 0.983559847952569, 0.9888056585720986, 0.9908347135294011, 0.9886647477756411, 0.9743012772234835, 0.9833107764294066, 0.9858376979827927, 0.9863778355671065, 0.99093943839932, 0.9909975529204907, 0.9902529773594144, 0.9648791450953302, 0.9813431143658353, 0.9817225842464691, 0.9861900262916877, 0.9881593647679267, 0.9907143132581339, 0.9895323524049253, 0.9700238292732887, 0.9865104558440402, 0.9864302911108878, 0.9820132274273684, 0.9926350120950362, 0.9924123296078685, 0.9910622835341053, 0.9707756850155018, 0.9815634494870024, 0.9773395693047908, 0.9884199507608032, 0.988222601124067, 0.9895573858419805, 0.9926264286041765, 0.9726568266289405, 0.9822765589378019, 0.9825559858191388, 0.9891638806898859, 0.9884042767825469, 0.9910725953675226, 0.9919742943978856, 0.9703705384326609, 0.9785180746654268, 0.9834799893922066, 0.9898340702703236, 0.9917169229481249, 0.9900793457455246, 0.9900736214979159, 0.9725241664014963, 0.9810211746538049, 0.9821983294311583, 0.9875957483739989, 0.9877249003815487, 0.9927364588049459, 0.9917830247799373, 0.9694623459458139, 0.9829083681954962, 0.982884528562569, 0.9888562561042302, 0.987208426256017, 0.9927924874009709, 0.9903991245482522, 0.9704346275657261, 0.9810274279320602, 0.9837936786527443, 0.9905504596180772, 0.9885892434588921, 0.9916787151211127, 0.9906898143550383, 0.9740761575021116, 0.9759220245656719, 0.9873851538095993, 0.986425644024619, 0.9915650489948665, 0.9890544483162734, 0.9904773851758554, 0.9726527343019185, 0.9737893448687627, 0.9860132934640816, 0.9860522173517613, 0.988658547425869, 0.9903630033020789, 0.9896373184632776, 0.9729021645505227, 0.9773648532962489, 0.9818326929602409, 0.988446299728766, 0.9917853480612968, 0.9925464392622098, 0.99202376621104, 0.9686492791949434, 0.9766219915294648, 0.9838209763281017, 0.990135372331458, 0.9909445646987745, 0.9932780265930488, 0.9899635912513725, 0.9632209564384049, 0.9794223526937578, 0.9853978400350879, 0.9867324967535779, 0.9865040831641438, 0.9915667782243308, 0.9917425514786289, 0.9576848773522859, 0.9804517095050456, 0.985669438983027, 0.9877128694157508, 0.9896581773055971, 0.9923282266876674, 0.9921320084910263, 0.9724986561143486, 0.9819719767856945, 0.9827874302869513, 0.9860298681023084, 0.9916188121068548, 0.9890631437354721, 0.9937979579170828, 0.9668930311661407, 0.9855920701160276, 0.9877766378891273, 0.987697601629582, 0.9860076346279114, 0.9866500618930134, 0.9925161006342056],
[0.9675963224181093, 0.9801602664602593, 0.986756694294168, 0.9878904239733147, 0.9907013180362386, 0.991158127874004, 0.9896297466190888, 0.9650206582317447, 0.9790435457996245, 0.9778778776433377, 0.99006456486108, 0.9890640992952325, 0.9893770220381332, 0.9914914407404726, 0.9722750324213445, 0.9742740102937903, 0.9840908697167805, 0.9863363596088287, 0.9918411977510164, 0.9891903407076011, 0.9924410583297952, 0.9772124973934357, 0.9768114578815993, 0.9860214008537244, 0.987356010840572, 0.9891127348289137, 0.9899197881703847, 0.9926475882606236, 0.9688664739349063, 0.9816184656347384, 0.980140235495925, 0.9882059731054601, 0.9896754681145558, 0.990231157933649, 0.993218362419884, 0.9789259461618898, 0.9766916037342941, 0.98699533939399, 0.9906064896917681, 0.9928044080756828, 0.9908348338538592, 0.9922326811980136, 0.9523926976963402, 0.9794585022876995, 0.9837939195755777, 0.989491045940877, 0.988171221675543, 0.9915237428034799, 0.9915708303900811, 0.9761675202883736, 0.9798641396265407, 0.9792035129184434, 0.9890727996962229, 0.9919594537342693, 0.9906392693658607, 0.9925770164448597, 0.9664418110177776, 0.9831262929505492, 0.980798606197769, 0.9797117729675648, 0.991509199474547, 0.9888069633559761, 0.9894365076329178, 0.9681861625436363, 0.9809576986825183, 0.9862517118762318, 0.9874979349267289, 0.9902825957064569, 0.9921072721492721, 0.9936931133438472, 0.9712880902274766, 0.9762335676545348, 0.9868124190804438, 0.9907450086695662, 0.9925656916858174, 0.9927571417139278, 0.9921982887851389, 0.9743023050073285, 0.9814786966087431, 0.9836657141909397, 0.9853883441508119, 0.9907845864430167, 0.992086350920584, 0.9896060830829366, 0.9659719479779932, 0.9750002178210807, 0.9823645455581075, 0.9890444892232113, 0.9881555448864348, 0.9913910630063735, 0.9920211442590994, 0.9755380991961344, 0.9826923613455114, 0.9826860428809167, 0.9865776333008692, 0.9902504700485836, 0.9912499189380798, 0.9877219802980297, 0.9716632808247662, 0.9789203612738627, 0.9864313006946629, 0.9844944543093028, 0.9890400778496949, 0.9875929963445348, 0.9927961240489616, 0.9728134421082785, 0.978642911561562, 0.9865896114762394, 0.9913973833565903, 0.9878625282726198, 0.9914821387161408, 0.9937316775869149, 0.9767558138945758, 0.9732186852388626, 0.9842911959998962, 0.9882831012298484, 0.9900748738729297, 0.9852902890981761, 0.9923474208622894, 0.9603973108914182, 0.981489493707785, 0.982936654187064, 0.9857863206429818, 0.99278491874678, 0.9917145391088907, 0.991162598140605, 0.96541280973976, 0.9773207941172058, 0.985601188797141, 0.9852082799817261, 0.9918844713012239, 0.9897505047715288, 0.9906842115890311, 0.9674135412450925, 0.9813903050344851, 0.9842438892616031, 0.9875198069439242, 0.9911340480155661, 0.991351724206779, 0.992339552456088]
]



# def list_cutting(list, step, alpha):
#     new_list = []
#     for i in range(len(list)):
#         if i % step < alpha:
#             new_list.append(list[i])

#     return new_list

# CNOT_numses_new = []
# for list in CNOT_numses:
#     list_new = list_cutting(list, 50, 20)
#     CNOT_numses_new.append(list_new)

# acc_reses_new = []
# for list in acc_reses:
#     list_new = list_cutting(list, 50, 20)
#     acc_reses_new.append(list_new)

acc_reses_new = []
CNOT_numses_new = []
for i, acc_rese in enumerate(acc_reses):
    acc_rese_new = []
    CNOT_nums_new = []
    for j, acc in enumerate(acc_rese):
        if j % 18 > 12 or j % 18 == 3 or j %18 == 8:
            acc_rese_new.append(acc)
            CNOT_nums_new.append(CNOT_numses[i][j])
    acc_reses_new.append(acc_rese_new)
    CNOT_numses_new.append(CNOT_nums_new)

int_acc = []
int_CNOT = []
for j, acc_new in enumerate(acc_reses_new):
    int_acc_new = [sum(acc_reses_new[j][i:i+20])/len(acc_reses_new[j][i:i+20]) for i in range(int(len(acc_reses_new[j])/20))]
    int_CNOT_new = [sum(CNOT_numses_new[j][i:i+20])/len(CNOT_numses_new[j][i:i+20]) for i in range(int(len(CNOT_numses_new[j])/20))]
    int_acc.append(int_acc_new)
    int_CNOT.append(int_CNOT_new)


# group_acc_reses, group_CNOT_numses = data_process(acc_reses, CNOT_numses, 0.005, 0.1)

# data_dict_0 = {group_acc_reses[0][i]: group_CNOT_numses[0][i] for i in range(len(group_acc_reses[0]))}
# data_dict_1 = {group_acc_reses[1][i]: group_CNOT_numses[1][i] for i in range(len(group_acc_reses[1]))}
# data_dict_2 = {group_acc_reses[2][i]: group_CNOT_numses[2][i] for i in range(len(group_acc_reses[2]))}

# reduction_percentages_01 = []
# reduction_percentages_02 = []


# for accuracy, gate_count1 in data_dict_0.items():
#     if accuracy in data_dict_1:
#         gate_count2 = data_dict_1[accuracy]
#         # print(accuracy)
#         # print(gate_count1,gate_count2)
#         reduction = (gate_count1 - gate_count2) / gate_count1
#         reduction_percentage = reduction * 100
#         reduction_percentages_01.append(reduction_percentage)

# average_reduction_percentage_01 = sum(reduction_percentages_01) / len(reduction_percentages_01)

# for accuracy, gate_count1 in data_dict_0.items():
#     if accuracy in data_dict_2:
#         gate_count2 = data_dict_2[accuracy]
#         # print(accuracy)
#         # print(gate_count1,gate_count2)
#         reduction = (gate_count1 - gate_count2) / gate_count1
#         reduction_percentage = reduction * 100
#         reduction_percentages_02.append(reduction_percentage)

# average_reduction_percentage_02 = sum(reduction_percentages_02) / len(reduction_percentages_02)

Gate_list = [sum(item) for item in CNOT_numses_new]
print(Gate_list)

average_reduction_percentage_01 = (Gate_list[0]-Gate_list[1])/Gate_list[0]
average_reduction_percentage_02 = (Gate_list[0]-Gate_list[2])/Gate_list[0]

print("gate average reduction:", average_reduction_percentage_01, average_reduction_percentage_02)

print(int_acc)
print(int_CNOT[1])


if len(CNOT_numses) == 3:
    # plt.plot(group_acc_reses[0], group_CNOT_numses[0], color='b', label='1.0, 0.0, 0.0', marker='x', markersize=16, linewidth=1)
    # plt.plot(group_acc_reses[1], group_CNOT_numses[1], color='g', label='0.4, 0.6, 0.0', marker='^', markersize=16, linewidth=1)
    # plt.plot(group_acc_reses[2], group_CNOT_numses[2], color='y', label='0.4, 0.3, 0.3', marker='o', markersize=16, linewidth=1)
    # plt.plot(group_acc_reses[3], group_CNOT_numses[3], color='r', label='0.6, 0.1, 0.3', marker='s', markersize=16, linewidth=1)
    # plt.legend(loc='upper left', fontsize=16)
    # plt.gca().invert_yaxis()
    # plt.scatter(acc_reses_new[0], CNOT_numses_new[0], color='b', label='1.0, 0.0, 0.0', marker='x')
    # plt.scatter(acc_reses_new[1], CNOT_numses_new[1], color='g', label='0.4, 0.6, 0.0', marker='^')
    # plt.scatter(acc_reses_new[2], CNOT_numses_new[2], color='y', label='0.4, 0.3, 0.3', marker='o')
    plt.scatter(acc_reses[0], CNOT_numses[0], color='b', label='1.0, 0.0, 0.0', marker='x')
    plt.scatter(acc_reses[1], CNOT_numses[1], color='g', label='0.4, 0.6, 0.0', marker='^')
    plt.scatter(acc_reses[2], CNOT_numses[2], color='y', label='0.4, 0.3, 0.3', marker='o')
    # plt.scatter(int_acc[0], int_CNOT[0], color='b', label='1.0, 0.0, 0.0', marker='x')
    # plt.scatter(int_acc[1], int_CNOT[1], color='g', label='0.4, 0.6, 0.0', marker='^')
    # plt.scatter(int_acc[2], int_CNOT[2], color='y', label='0.4, 0.3, 0.3', marker='o')
    plt.legend(loc='upper left', fontsize=16)
    # plt.scatter(CNOT_numses[3], acc_reses[3], c='b')

plt.show()
# plt.savefig('A-overall' + '\\7_Pauli_BeH2_f' '\\photo' + '1s+' + '.png')